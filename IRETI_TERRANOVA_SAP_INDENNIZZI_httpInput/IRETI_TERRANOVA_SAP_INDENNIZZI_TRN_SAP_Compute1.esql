DECLARE ns NAMESPACE 'www.gruppoiren.it/schemas';


CREATE COMPUTE MODULE IRETI_TERRANOVA_SAP_INDENNIZZI_TRN_SAP_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		/****************************************************************************
		* A procedure that will get the details of the last exception from a message
		* IN InputTree: The incoming exception list
		* IN messageNumber: The last message numberr.
		* IN messageText: The last message text.
		*****************************************************************************/
		DECLARE messageNumber integer;
		DECLARE messageText CHARACTER;

		------------------------------------------------------
		DECLARE crlf CHAR CAST(X'0D0A' AS CHAR CCSID 1208);
		DECLARE numDoc CHARACTER;
		set numDoc = CAST(Environment.Variables.count AS CHARACTER); --numero records elaborati o rolled-back
		DECLARE INS CHARACTER;
		SET INS = CAST(Environment.Variables.Ins AS CHARACTER);
		SET messageText = 'ok';
		-- Declare a reference for the ExceptionList
		-- (in a Compute node use InputExceptionList)
		-- Create a reference to the first child of the exception list
		DECLARE ptrException reference to InputExceptionList.*[1];
		DECLARE descrizione CHARACTER 'Inseriti in SAP ISU: ' || INS;
		-- DECLARE lungo INTEGER 0;
		-- -- keep looping while the moves to the child of exception list work
		WHILE lastmove(ptrException) DO
			-- SET messageText = 'ERRORE'; --per capire che abbiamo errori
			-- store the current values for the error number and text
			IF ptrException.Number is not null THEN
				-- IF (lungo< LENGTH(ptrException.Text)) THEN
				-- SET lungo = LENGTH(ptrException.Text);
				SET messageNumber = ptrException.Number;
				SET messageText = messageText || crlf || ptrException.Text;
				-- END IF;

			END IF;
			-- now move to the last child which should be the next exceptionlist
			move ptrException lastchild;
		END WHILE;
		IF (messageText <> 'ok') THEN
			-- passare l'errore all'output --
			--preparare INVIO EMAIL ASINCRONO
			SET OutputRoot.XMLNSC.ns:Params.flusso = 'IRETI_TERRANOVA_SAP_INDENNIZZI';
			SET OutputRoot.XMLNSC.ns:Params.obj1 = 'IRETI_TERRANOVA_SAP_INDENNIZZI - Flusso KO';-- ||  CAST(idunico AS CHARACTER);--fissiamolo per il LOG e mail dopo;
			SET OutputRoot.XMLNSC.ns:Params.body1 = 'nÂ° record inizialmente  da elaborare: ' || numDoc;
			SET OutputRoot.XMLNSC.ns:Params.body2 = messageText ; -- 
			SET OutputRoot.XMLNSC.ns:Params.body3 = '...SORRY...';

			--*/
		ELSE --esito OK....
			--preparare INVIO EMAIL ASINCRONO
			SET OutputRoot.XMLNSC.ns:Params.flusso = 'IRETI_TERRANOVA_SAP_INDENNIZZI';
			SET OutputRoot.XMLNSC.ns:Params.obj1 = 'IRETI_TERRANOVA_SAP_INDENNIZZI - OK';
			SET OutputRoot.XMLNSC.ns:Params.body1 = 'Record elaborati: ' || numDoc;
			SET OutputRoot.XMLNSC.ns:Params.body2 = descrizione; -- 'Inserts: ' || CAST(Environment.Variables.Ins AS CHARACTER) || ', Updates: ' || CAST(Environment.Variables.Upd AS CHARACTER);
			SET OutputRoot.XMLNSC.ns:Params.body3 = 'ciao';
	
		END IF;
		--due messaggi uguali escono da out e out1:
		PROPAGATE DELETE NONE;
		PROPAGATE TO TERMINAL 'out1' DELETE NONE;

		RETURN false;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;