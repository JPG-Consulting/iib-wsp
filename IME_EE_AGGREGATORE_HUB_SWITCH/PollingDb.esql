DECLARE ns NAMESPACE 'http://db/aaggrega';


/*
 * This DatabaseEvent module implements the ESQL code invoked from a DatabaseInput node to handle
 * events as they move through the states of New->Ready->Dispatched->Complete.
 *
 * NOTE: Events that result in unhandled exceptions in the message flow are moved to the Failed
 * state. "Unhandled" means either that the catch terminal was not wired, or that the catch
 * terminal threw an exception.  If an exception is unhandled, the transaction is rolled back.
 * If the exception is handled, even if it is handled on the catch terminal, the transaction is
 * committed.
 *
 * Events are moved to the Failed state after rollback (or after a number of retries, depending 
 * on the settings on the Retry panel).  Events in the Failed state are propagated to the Failure
 * terminal.  If they are not handled on the failure terminal, they are discarded.  They are
 * still in the EventTable, and so are not lost.
 *
 * If you are using a database table as your event store, you can convert this template to deployable
 * code by replacing the substitution strings. Substitution strings in this module are enclosed by
 * < and > characters.
 * The following substitution strings are used:
 *   <MySchemaName>                 - the database schema name.
 *   <MyEventTableName>             - the database table used as your event store.
 *   <MyEventTablePrimaryKey>       - the primary key of the database table used as the event store.
 *   <MyStatusColumnName>           - the name of a column, if you update a column in the event table
 *                                    to indicate that the event has been processed.
 *                                    If you delete events from the event table after processing, you
 *                                    do not need <MyStatusColumnName>.
 *   <MyNewEventStatusValue>        - the value written to the status column when the event is first
 *                                    added. You need this only if you use <MyStatusColumnName>.
 *   <MyProcessedEventStatusValue>  - the value written to the status column after the event has been
 *                                    processed. You need this only if you use <MyStatusColumnName>.
 *   <MyApplicationTableName>       - the name of the table that includes the changed data to be processed
 *                                    by the DatabaseInput node.
 *   <MyEventTableForeignKey>       - the column in the event table that references the row in the application
 *                                    table containing the changed data to be processed by the DatabaseInput
 *                                    node. This is typically the primary key of the application table.
 *   <MyApplicationTablePrimaryKey> - the primary key of the database table used as the application table.
 * When you have finished editing the ESQL, set the data source and ESQL module properties on the basic tab
 * of this node.
 */
CREATE DATABASEEVENT MODULE PollingDb

	/*
	 * ReadEvents populates the NewEvents structure with event data read from the event table.
	 * ReadEvents is called after all current events have been dispatched.
	 * ReadEvents is called on a new transaction that is a separate transaction from the message
	 * flow, and that runs before the message flow transaction.
	 *
	 * After ReadEvents completes:
	 * - the current transaction is committed to ensure that any database locks obtained during
	 *   ReadEvents are released.
	 * - All events in NewEvents are moved to Ready state.  This means that they are ready to be
	 *   dispatched.
	 *
	 * Parameters:
	 * IN NewEvents REFERENCE.  This is a reference to a ROW. ReadEvents must create children of
	 *                          this ROW for each event that is being processed.
	 *                          Each child must include a Usr field and a Key field.
	 */
	 CREATE PROCEDURE ReadEvents( IN NewEvents REFERENCE )
	 BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('ReadEvents');
		END;

		/*
		 * Here you select all unprocessed events from the event store.
		 * You only read the events here; you delete them in EndEvent.
		 * In general, it is not good practice to delete or update the events here because this
		 * transaction will be committed even before the BuildMessage procedure is called.
		 * Under certain circumstances, for example, if you do not need assured delivery of the
		 * events, it is acceptable to update or delete the events here. This means that
		 * the deletion or update is committed before the message flow processes the in-memory
		 * copies of these events. If the broker, execution group, or message flow is stopped
		 * or redeployed in the meantime, the in-memory copy is lost, and the events are never
		 * processed by the flow.
		 *
		 * NOTE: You do not need to filter out events that are currently dispatched here.
		 *       The framework ensures that events are not duplicated by comparing the Key field
		 *       to the Key field of dispatched events.
		 */

		--@!{ ******************** "ReadEvents" autogenerated code (1) ********************
		-- Please do not delete the start and end annotation comments if you want the tool to generate code
		-- for you. Any code that you add or change inside the start and end annotation comments will be lost
		-- in your next code generation.
		SET NewEvents.Event[] = SELECT  MAC070_SWITCH_SII.MAC070_PKEY_SEQ AS Key
									  , MAC070_SWITCH_SII.MAC070_PKEY_SEQ 				 AS Usr.MAC070_PKEY_SEQ            
									  , MAC070_SWITCH_SII.MAC070_SERVIZIO                AS Usr.MAC070_SERVIZIO               
									  , MAC070_SWITCH_SII.MAC070_COD_FLUSSO_REQ          AS Usr.MAC070_COD_FLUSSO_REQ         
									  , MAC070_SWITCH_SII.MAC070_COD_FLUSSO_RES          AS Usr.MAC070_COD_FLUSSO_RES         
									  , MAC070_SWITCH_SII.MAC070_TRACKSOCIETAVENDITA     AS Usr.MAC070_TRACKSOCIETAVENDITA    
									  , MAC070_SWITCH_SII.MAC070_TRACKSEGMENTOCLIENTE    AS Usr.MAC070_TRACKSEGMENTOCLIENTE   
									  , MAC070_SWITCH_SII.MAC070_TRACKSISTEMAFATTURAZ    AS Usr.MAC070_TRACKSISTEMAFATTURAZ   
									  , MAC070_SWITCH_SII.MAC070_TRACKSISTEMAORIGINE     AS Usr.MAC070_TRACKSISTEMAORIGINE    
									  , MAC070_SWITCH_SII.MAC070_CONTRATTODISPACCIAMENTO AS Usr.MAC070_CONTRATTODISPACCIAMENTO
									  , MAC070_SWITCH_SII.MAC070_COD_PRATICA_HUB         AS Usr.MAC070_COD_PRATICA_HUB        
									  , MAC070_SWITCH_SII.MAC070_COD_PRATICA_SII         AS Usr.MAC070_COD_PRATICA_SII        
									  , MAC070_SWITCH_SII.MAC070_NOME_CLIENTE_MAC        AS Usr.MAC070_NOME_CLIENTE_MAC       
									  , MAC070_SWITCH_SII.MAC070_COGNOME_CLIENTE_MAC     AS Usr.MAC070_COGNOME_CLIENTE_MAC    
									  , MAC070_SWITCH_SII.MAC070_RAG_SOCIALE_CLIENTE_MAC AS Usr.MAC070_RAG_SOCIALE_CLIENTE_MAC
									  , MAC070_SWITCH_SII.MAC070_CDFISCALE_CLIENTE_MAC   AS Usr.MAC070_CDFISCALE_CLIENTE_MAC  
									  , MAC070_SWITCH_SII.MAC070_PTIVA_CLIENTE_MAC       AS Usr.MAC070_PTIVA_CLIENTE_MAC      
									  , MAC070_SWITCH_SII.MAC070_CFSTRANIERO_CLIENTE_MAC AS Usr.MAC070_CFSTRANIERO_CLIENTE_MAC
									  , MAC070_SWITCH_SII.MAC070_POD                     AS Usr.MAC070_POD                    
									  , MAC070_SWITCH_SII.MAC070_AMM_ESITO               AS Usr.MAC070_AMM_ESITO              
									  , MAC070_SWITCH_SII.MAC070_AMM_COD_CAUSALE         AS Usr.MAC070_AMM_COD_CAUSALE        
									  , MAC070_SWITCH_SII.MAC070_AMM_MOTIVAZIONE         AS Usr.MAC070_AMM_MOTIVAZIONE        
									  , MAC070_SWITCH_SII.MAC070_AMM_DATA                AS Usr.MAC070_AMM_DATA               
									  , MAC070_SWITCH_SII.MAC070_CODICEAUTHORITYDL       AS Usr.MAC070_CODICEAUTHORITYDL      
									  , MAC070_SWITCH_SII.MAC070_CANALECOMUNICAZIONE     AS Usr.MAC070_CANALECOMUNICAZIONE    
									  , MAC070_SWITCH_SII.MAC070_ESITO                   AS Usr.MAC070_ESITO                  
									  , MAC070_SWITCH_SII.MAC070_COD_CAUSALE             AS Usr.MAC070_COD_CAUSALE            
									  , MAC070_SWITCH_SII.MAC070_MOTIVAZIONE             AS Usr.MAC070_MOTIVAZIONE            
									  , MAC070_SWITCH_SII.MAC070_DATAESECUZIONE          AS Usr.MAC070_DATAESECUZIONE         
									  , MAC070_SWITCH_SII.MAC070_NOTE                    AS Usr.MAC070_NOTE                   
									  , MAC070_SWITCH_SII.MAC070_CD_FISCALE_CLIENTE_SII  AS Usr.MAC070_CD_FISCALE_CLIENTE_SII 
									  , MAC070_SWITCH_SII.MAC070_PIVA_CLIENTE_SII        AS Usr.MAC070_PIVA_CLIENTE_SII       
									  , MAC070_SWITCH_SII.MAC070_CFSTRANIERO_CLIENTE_SII AS Usr.MAC070_CFSTRANIERO_CLIENTE_SII
									  , MAC070_SWITCH_SII.MAC070_CODISTAT_FORNITURA      AS Usr.MAC070_CODISTAT_FORNITURA     
									  , MAC070_SWITCH_SII.MAC070_DATADECORRENZA          AS Usr.MAC070_DATADECORRENZA         
									  , MAC070_SWITCH_SII.MAC070_AUTOCERTCONTRCONN       AS Usr.MAC070_AUTOCERTCONTRCONN      
									  , MAC070_SWITCH_SII.MAC070_DATAFIRMCONTRATTO       AS Usr.MAC070_DATAFIRMCONTRATTO      
									  , MAC070_SWITCH_SII.MAC070_ACQUISTOCREDITOSALVAG   AS Usr.MAC070_ACQUISTOCREDITOSALVAG  
									  , MAC070_SWITCH_SII.MAC070_REVOCA                  AS Usr.MAC070_REVOCA                 
									  , MAC070_SWITCH_SII.MAC070_RICHIESTADATI_TIMOE     AS Usr.MAC070_RICHIESTADATI_TIMOE    
									  , MAC070_SWITCH_SII.MAC070_DATARICHIESTA_ANNULL    AS Usr.MAC070_DATARICHIESTA_ANNULL   
									  , MAC070_SWITCH_SII.MAC070_CAUSALE_ANNULL          AS Usr.MAC070_CAUSALE_ANNULL         
									  , MAC070_SWITCH_SII.MAC070_MOTIVAZIONE_ANNULL      AS Usr.MAC070_MOTIVAZIONE_ANNULL     
									  , MAC070_SWITCH_SII.MAC070_SOSPESO                 AS Usr.MAC070_SOSPESO                
									  , MAC070_SWITCH_SII.MAC070_CMOR_IN_CORSO           AS Usr.MAC070_CMOR_IN_CORSO          
									  , MAC070_SWITCH_SII.MAC070_DATE_SOSPENSIONE        AS Usr.MAC070_DATE_SOSPENSIONE       
									  , MAC070_SWITCH_SII.MAC070_DATE_SWITCH             AS Usr.MAC070_DATE_SWITCH            
									  , MAC070_SWITCH_SII.MAC070_DATA_SALVAGUARDIA       AS Usr.MAC070_DATA_SALVAGUARDIA      
									  , MAC070_SWITCH_SII.MAC070_DATA_ULTIMA_RICH_SOSP   AS Usr.MAC070_DATA_ULTIMA_RICH_SOSP  
									  , MAC070_SWITCH_SII.MAC070_DATA_ULTIMA_SOSP        AS Usr.MAC070_DATA_ULTIMA_SOSP       
									  , MAC070_SWITCH_SII.MAC070_TMS_CREATED             AS Usr.MAC070_TMS_CREATED            
									  , MAC070_SWITCH_SII.MAC070_TMS_UPDATED             AS Usr.MAC070_TMS_UPDATED            
									  , MAC070_SWITCH_SII.MAC070_FLG_OUT                 AS Usr.MAC070_FLG_OUT                
									  , MAC070_SWITCH_SII.MAC070_DATA_OUT                AS Usr.MAC070_DATA_OUT               
									  , MAC070_SWITCH_SII.MAC070_FLG_IN                  AS Usr.MAC070_FLG_IN                 
									  , MAC070_SWITCH_SII.MAC070_DATA_IN                 AS Usr.MAC070_DATA_IN                
									  , MAC070_SWITCH_SII.MAC070_ID_PROC                 AS Usr.MAC070_ID_PROC                
									  , MAC070_SWITCH_SII.MAC070_CONSUTIVATORE           AS Usr.MAC070_CONSUTIVATORE          
  		                        FROM Database.AAGGREGA.MAC070_SWITCH_SII
		                        WHERE MAC070_SWITCH_SII.MAC070_FLG_OUT IS NULL;
		--@!} ******************** "ReadEvents" autogenerated code (1) ********************
	END;


	/*
	 * BuildMessage builds the message to be propagated to the flow.
	 * Typically, you use the event data for the current dispatched event to look up data in
	 * the application table, and copy that data into the message.
	 * BuildMessage is called while some events are in the Ready state.
	 * BuildMessage is called as part of the message flow transaction. This transaction also
	 * involves EndEvent.
	 *
	 * After BuildMessage returns, the message is propagated to the message flow.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the
	 *                                current dispatched event. This is a copy of one of the 
	 *                                events added to NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE BuildMessage(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('BuildMessage');
		END;
		/* Here you use the event data in the local environment to retrieve the application data. */

		--@!{ ******************** "BuildMessage" autogenerated code (1) ********************
		-- Please do not delete the start and end annotation comments if you want the tool to generate code
		-- for you. Any code that you add or change inside the start and end annotation comments will be lost
		-- in your next code generation.
		SET Root.DataObject.ns:MAC070_SWITCH_SII[] =
				SELECT MAC070_SWITCH_SII.MAC070_PKEY_SEQ               
					 , MAC070_SWITCH_SII.MAC070_SERVIZIO               
					 , MAC070_SWITCH_SII.MAC070_COD_FLUSSO_REQ         
					 , MAC070_SWITCH_SII.MAC070_COD_FLUSSO_RES         
					 , MAC070_SWITCH_SII.MAC070_TRACKSOCIETAVENDITA    
					 , MAC070_SWITCH_SII.MAC070_TRACKSEGMENTOCLIENTE   
					 , MAC070_SWITCH_SII.MAC070_TRACKSISTEMAFATTURAZ   
					 , MAC070_SWITCH_SII.MAC070_TRACKSISTEMAORIGINE    
					 , MAC070_SWITCH_SII.MAC070_CONTRATTODISPACCIAMENTO
					 , MAC070_SWITCH_SII.MAC070_COD_PRATICA_HUB        
					 , MAC070_SWITCH_SII.MAC070_COD_PRATICA_SII        
					 , MAC070_SWITCH_SII.MAC070_NOME_CLIENTE_MAC       
					 , MAC070_SWITCH_SII.MAC070_COGNOME_CLIENTE_MAC    
					 , MAC070_SWITCH_SII.MAC070_RAG_SOCIALE_CLIENTE_MAC
					 , MAC070_SWITCH_SII.MAC070_CDFISCALE_CLIENTE_MAC  
					 , MAC070_SWITCH_SII.MAC070_PTIVA_CLIENTE_MAC      
					 , MAC070_SWITCH_SII.MAC070_CFSTRANIERO_CLIENTE_MAC
					 , MAC070_SWITCH_SII.MAC070_POD                    
					 , MAC070_SWITCH_SII.MAC070_AMM_ESITO              
					 , MAC070_SWITCH_SII.MAC070_AMM_COD_CAUSALE        
					 , MAC070_SWITCH_SII.MAC070_AMM_MOTIVAZIONE        
					 , MAC070_SWITCH_SII.MAC070_AMM_DATA               
					 , MAC070_SWITCH_SII.MAC070_CODICEAUTHORITYDL      
					 , MAC070_SWITCH_SII.MAC070_CANALECOMUNICAZIONE    
					 , MAC070_SWITCH_SII.MAC070_ESITO                  
					 , MAC070_SWITCH_SII.MAC070_COD_CAUSALE            
					 , MAC070_SWITCH_SII.MAC070_MOTIVAZIONE            
					 , MAC070_SWITCH_SII.MAC070_DATAESECUZIONE         
					 , MAC070_SWITCH_SII.MAC070_NOTE                   
					 , MAC070_SWITCH_SII.MAC070_CD_FISCALE_CLIENTE_SII 
					 , MAC070_SWITCH_SII.MAC070_PIVA_CLIENTE_SII       
					 , MAC070_SWITCH_SII.MAC070_CFSTRANIERO_CLIENTE_SII
					 , MAC070_SWITCH_SII.MAC070_CODISTAT_FORNITURA     
					 , MAC070_SWITCH_SII.MAC070_DATADECORRENZA         
					 , MAC070_SWITCH_SII.MAC070_AUTOCERTCONTRCONN      
					 , MAC070_SWITCH_SII.MAC070_DATAFIRMCONTRATTO      
					 , MAC070_SWITCH_SII.MAC070_ACQUISTOCREDITOSALVAG  
					 , MAC070_SWITCH_SII.MAC070_REVOCA                 
					 , MAC070_SWITCH_SII.MAC070_RICHIESTADATI_TIMOE    
					 , MAC070_SWITCH_SII.MAC070_DATARICHIESTA_ANNULL   
					 , MAC070_SWITCH_SII.MAC070_CAUSALE_ANNULL         
					 , MAC070_SWITCH_SII.MAC070_MOTIVAZIONE_ANNULL     
					 , MAC070_SWITCH_SII.MAC070_SOSPESO                
					 , MAC070_SWITCH_SII.MAC070_CMOR_IN_CORSO          
					 , MAC070_SWITCH_SII.MAC070_DATE_SOSPENSIONE       
					 , MAC070_SWITCH_SII.MAC070_DATE_SWITCH            
					 , MAC070_SWITCH_SII.MAC070_DATA_SALVAGUARDIA      
					 , MAC070_SWITCH_SII.MAC070_DATA_ULTIMA_RICH_SOSP  
					 , MAC070_SWITCH_SII.MAC070_DATA_ULTIMA_SOSP       
					 , MAC070_SWITCH_SII.MAC070_TMS_CREATED            
					 , MAC070_SWITCH_SII.MAC070_TMS_UPDATED            
					 , MAC070_SWITCH_SII.MAC070_FLG_OUT                
					 , MAC070_SWITCH_SII.MAC070_DATA_OUT               
					 , MAC070_SWITCH_SII.MAC070_FLG_IN                 
					 , MAC070_SWITCH_SII.MAC070_DATA_IN                
					 , MAC070_SWITCH_SII.MAC070_ID_PROC                
					 , MAC070_SWITCH_SII.MAC070_CONSUTIVATORE          				
					FROM Database.AAGGREGA.MAC070_SWITCH_SII
					WHERE MAC070_SWITCH_SII.MAC070_PKEY_SEQ = DispatchedEvent.Usr.MAC070_PKEY_SEQ;
		--@!} ******************** "BuildMessage" autogenerated code (1) ********************
		RETURN;
	END;


	/*
	 * EndEvent updates the event table to record the event as processed.
	 * EndEvent is called after the message flow has processed the event.
	 * EndEvent is called as part of the message flow transaction.  This transaction also involves
	 * BuildMessage. The transaction will be committed when this procedure ends.
	 *
	 * Parameters:
	 * IN DispatchedEvent REFERENCE.  A Reference to a ROW containing the event data for the current
	 *                                dispatched event. This is a copy of one of the events added to
	 *                                NewEvents by ReadEvents procedure.
	 */
	CREATE PROCEDURE EndEvent(IN DispatchedEvent REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE 'D%'
		BEGIN
			RESIGNAL; /* pass the error back to the node */

			/* To choose to handle Database errors yourself, delete the RESIGNAL statement above
			 * and uncomment the following procedure call */
--			CALL HandleDatabaseError('EndEvent');

		END;
		/* Here you update the event table to ensure that this event is not processed again. */

		--@!{ ******************** "EndEvent" autogenerated code (1) ********************
		-- Please do not delete the start and end annotation comments if you want the tool to generate code
		-- for you. Any code that you add or change inside the start and end annotation comments will be lost
		-- in your next code generation.

		UPDATE Database.AAGGREGA.MAC070_SWITCH_SII
				SET MAC070_FLG_OUT = 'X'
				 , MAC070_DATA_OUT = CURRENT_TIMESTAMP
				WHERE MAC070_SWITCH_SII.MAC070_PKEY_SEQ = DispatchedEvent.Usr.MAC070_PKEY_SEQ;
		--@!} ******************** "EndEvent" autogenerated code (1) ********************
		RETURN;
	END;


	CREATE PROCEDURE HandleDatabaseError( IN FunctionName CHARACTER )
	BEGIN
		/* Throw a different exception; this could be changed. */
		DECLARE message CHARACTER 'Exception occured calling Database Input Node function: ' || FunctionName;
		THROW USER EXCEPTION VALUES( SQLCODE, SQLSTATE, SQLNATIVEERROR, SQLERRORTEXT, message );
	END;

END MODULE;
