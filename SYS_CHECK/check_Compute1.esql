

CREATE COMPUTE MODULE check_MQ
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		/****************************************************************************
	 * A procedure that will get the details of the last exception from a message
 	 * IN InputTree:  The incoming exception list
	 * IN messageNumber:  The last message numberr.
	 * IN messageText: The last message text.
	 *****************************************************************************/

 		
		DECLARE messageNumber integer;
		DECLARE messageText char;
		-- Declare a reference for the ExceptionList
		-- (in a Compute node use InputExceptionList)
		 -- Create a reference to the first child of the exception list

   	    DECLARE ptrException reference to InputExceptionList.*[1];
   	    DECLARE lungo INTEGER 0;
   		DECLARE details CHARACTER;
				
   	    -- keep looping while the moves to the child of exception list work 
		WHILE lastmove(ptrException) DO
			-- store the current values for the error number and text
			IF ptrException.Number is not null THEN
				IF (lungo< LENGTH(ptrException.Text)) THEN
					SET lungo = LENGTH(ptrException.Text);
					SET messageNumber = ptrException.Number;
        			SET messageText = ptrException.Text;
				END IF;
        		
  			END IF;
  			-- now move to the last child which should be the next exceptionlist
			move ptrException lastchild;
		END WHILE; 
	-- passare l'errore all'output	--
		
		
	
--		SET OutputRoot.XMLNSC.Status = 'Esito DB : KO-  ' || messageText  ;     TEST
		--SET Environment.Variables.dbCheck = 'Db KO';
--		SET Environment.Variables.dbCheck = 'Esito DB : KO-  ' || messageText  ; 

		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueM = Environment.Variables.queueM  ;
		SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = 'SYSTEM.ADMIN.ACTIVITY.QUEUE';  
			
		SET Environment.Variables.dbCheck = 'KO : Errore: ' || messageText; 	
	
	
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
