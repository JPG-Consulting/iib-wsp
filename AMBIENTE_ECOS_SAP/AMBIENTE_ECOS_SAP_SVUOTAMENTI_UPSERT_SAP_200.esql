

CREATE COMPUTE MODULE AMBIENTE_ECOS_SAP_SVUOTAMENTI_UPSERT_SAP_200
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
--		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		
		DECLARE Num_Svuot INTEGER;
		
		DECLARE varMANDT CHARACTER;
		DECLARE varTIPO_RECORD CHARACTER;
		DECLARE varCITY_CODE CHARACTER;
		DECLARE varPARTNER CHARACTER;
		DECLARE varVERTRAG CHARACTER;
		DECLARE varANLAGE CHARACTER;
		DECLARE varCONTENITORE CHARACTER;
		DECLARE varDATA_INIZIO_IRF CHARACTER;
		DECLARE varDATA_FINE_IRF CHARACTER;
		DECLARE varTIPO_CONTENITORE CHARACTER;
		DECLARE varCAPACITA_CONTENITORE CHARACTER;
		DECLARE varCODICE_RIFIUTO CHARACTER;
		DECLARE varDATA_CONSEGNA CHARACTER;
		DECLARE varDATA_RITIRO CHARACTER;
		DECLARE varINDICE_RIP CHARACTER;
		DECLARE varNUMERO_SVUOTAMENTI CHARACTER;
		DECLARE varDATA_IMPORTAZIONE CHARACTER;
		DECLARE varUTENTE_IMPORTAZIONE CHARACTER;
		DECLARE varNOME_FILE_IMPORTAZIONE CHARACTER;
		DECLARE varANOMALIA_CARICAMENTO CHARACTER;
		DECLARE varDATA_CARICAMENTO CHARACTER;
		DECLARE varUTENTE_CARICAMENTO CHARACTER;
		DECLARE varBELNR_WU CHARACTER;
		DECLARE varDTWU CHARACTER; 
		DECLARE varHHWU CHARACTER; 
		DECLARE varANOMALIA_WU CHARACTER; 
		
		
		DECLARE msgForSAP REFERENCE TO InputRoot.XMLNSC.ns:zpap_dati_ecos[1];
		WHILE LASTMOVE (msgForSAP) = true DO
			SET varMANDT = TRIM(msgForSAP.ns:MANDT);
			SET varTIPO_RECORD = TRIM(msgForSAP.ns:TIPO_RECORD);
			SET varCITY_CODE = TRIM(msgForSAP.ns:CITY_CODE);
			SET varPARTNER = TRIM(msgForSAP.ns:PARTNER);
			SET varVERTRAG = TRIM(msgForSAP.ns:VERTRAG);
			SET varANLAGE = TRIM(msgForSAP.ns:ANLAGE);
			SET varCONTENITORE = TRIM(msgForSAP.ns:CONTENITORE);
			SET varDATA_INIZIO_IRF = TRIM(msgForSAP.ns:DATA_INIZIO_IRF);
			SET varDATA_FINE_IRF = TRIM(msgForSAP.ns:DATA_FINE_IRF);
			SET varTIPO_CONTENITORE = TRIM(msgForSAP.ns:TIPO_CONTENITORE);
			SET varCAPACITA_CONTENITORE = TRIM(msgForSAP.ns:CAPACITA_CONTENITORE);
			SET varCODICE_RIFIUTO = TRIM(msgForSAP.ns:CODICE_RIFIUTO);
			SET varDATA_CONSEGNA = TRIM(msgForSAP.ns:DATA_CONSEGNA);
			SET varDATA_RITIRO = TRIM(msgForSAP.ns:DATA_RITIRO);
			SET varINDICE_RIP = TRIM(msgForSAP.ns:INDICE_RIP);
			SET varNUMERO_SVUOTAMENTI = TRIM(msgForSAP.ns:NUMERO_SVUOTAMENTI);
			SET varDATA_IMPORTAZIONE = TRIM(msgForSAP.ns:DATA_IMPORTAZIONE);
			SET varUTENTE_IMPORTAZIONE = TRIM(msgForSAP.ns:UTENTE_IMPORTAZIONE);
			SET varNOME_FILE_IMPORTAZIONE = TRIM(msgForSAP.ns:NOME_FILE_IMPORTAZIONE);
			SET varANOMALIA_CARICAMENTO = TRIM(msgForSAP.ns:ANOMALIA_CARICAMENTO);
			SET varDATA_CARICAMENTO = TRIM(msgForSAP.ns:DATA_CARICAMENTO);
			SET varUTENTE_CARICAMENTO = TRIM(msgForSAP.ns:UTENTE_CARICAMENTO);
			SET varBELNR_WU = TRIM(msgForSAP.ns:BELNR_WU);
			SET varDTWU = TRIM(msgForSAP.ns:DTWU);
			SET varHHWU = TRIM(msgForSAP.ns:HHWU);
			SET varANOMALIA_WU = TRIM(msgForSAP.ns:ANOMALIA_WU);
	
	
			-- salviamo in environemnt la chiave del record
			SET Environment.Variables.chiaveRecord =  varMANDT || ' ' ||  varTIPO_RECORD || ' ' || varCITY_CODE || ' ' || varPARTNER || ' ' || varVERTRAG || ' ' || varANLAGE || ' ' || varCONTENITORE || ' ' || varDATA_INIZIO_IRF || ' ' || varDATA_FINE_IRF;
			
			
				
			SET Environment.resultEsisteSuSAP[] = 
				select t.NUMERO_SVUOTAMENTI --leggo solo questo campo, mi servirà in caso di UPDATE
	          	from Database.SAPR3.ZPAP_DATI_ECOS as t
	          	where t.MANDT = varMANDT 
	          	and t.TIPO_RECORD = varTIPO_RECORD 
	          	and t.CITY_CODE = varCITY_CODE
	          	and t.PARTNER = varPARTNER
	          	and t.VERTRAG = varVERTRAG 
	          	and t.ANLAGE = varANLAGE
	          	and t.CONTENITORE = varCONTENITORE
	          	and t.DATA_INIZIO_IRF = varDATA_INIZIO_IRF
	          	and t.DATA_FINE_IRF = varDATA_FINE_IRF;
	        
	        DECLARE EsisteSuSAP INTEGER;
			SET EsisteSuSAP = CARDINALITY(Environment.resultEsisteSuSAP[]); 
	        
	        IF EsisteSuSAP=0 THEN --resultset vuoto --> ESEGUO INSERT
	      		INSERT INTO Database.SAPR3.ZPAP_DATI_ECOS 
				 (MANDT, TIPO_RECORD, CITY_CODE, 
				 PARTNER, VERTRAG, ANLAGE, 
				 CONTENITORE, DATA_INIZIO_IRF, DATA_FINE_IRF,
				 TIPO_CONTENITORE, CAPACITA_CONTENITORE, CODICE_RIFIUTO,
				 DATA_CONSEGNA, DATA_RITIRO, INDICE_RIP,
				 NUMERO_SVUOTAMENTI, DATA_IMPORTAZIONE, UTENTE_IMPORTAZIONE,
				 NOME_FILE_IMPORTAZIONE
				 --, ANOMALIA_CARICAMENTO, DATA_CARICAMENTO,
				 --UTENTE_CARICAMENTO, BELNR_WU, DTWU, 
				 --HHWU, ANOMALIA_WU 
				 ) 
				VALUES 
				 (varMANDT, varTIPO_RECORD, varCITY_CODE,
				 varPARTNER, varVERTRAG, varANLAGE, 
				 varCONTENITORE, varDATA_INIZIO_IRF, varDATA_FINE_IRF,
				 varTIPO_CONTENITORE, varCAPACITA_CONTENITORE, varCODICE_RIFIUTO,
				 varDATA_CONSEGNA, varDATA_RITIRO, varINDICE_RIP,
				 varNUMERO_SVUOTAMENTI, varDATA_IMPORTAZIONE, varUTENTE_IMPORTAZIONE,
				 varNOME_FILE_IMPORTAZIONE
				 --, varANOMALIA_CARICAMENTO, varDATA_CARICAMENTO,
				 --varUTENTE_CARICAMENTO, varBELNR_WU, varDTWU, 
				 --varHHWU, varANOMALIA_WU 
				 );
	        --aggiorno il contatore degli INSERT:
	        SET Environment.Variables.Ins = Environment.Variables.Ins + 1;
	        ELSE --ho almeno un risultato --> ESEGUO UPDATE, sommando il valore di NUMERO_SVUOTAMENTI a quello già esistente in tabella
				SET Num_Svuot =  Environment.resultEsisteSuSAP[1].NUMERO_SVUOTAMENTI + CAST(varNUMERO_SVUOTAMENTI AS INTEGER); --eseguo la somma degli svuotamenti
	
				UPDATE Database.SAPR3.ZPAP_DATI_ECOS AS t
				SET MANDT = varMANDT, TIPO_RECORD = varTIPO_RECORD, CITY_CODE = varCITY_CODE, 
				 PARTNER = varPARTNER, VERTRAG = varVERTRAG, ANLAGE = varANLAGE, 
				 CONTENITORE = varCONTENITORE, DATA_INIZIO_IRF = varDATA_INIZIO_IRF, DATA_FINE_IRF = varDATA_FINE_IRF,
				 TIPO_CONTENITORE = varTIPO_CONTENITORE, CAPACITA_CONTENITORE = varCAPACITA_CONTENITORE, CODICE_RIFIUTO = varCODICE_RIFIUTO,
				 DATA_CONSEGNA = varDATA_CONSEGNA, DATA_RITIRO = varDATA_RITIRO, INDICE_RIP = varINDICE_RIP,
				 NUMERO_SVUOTAMENTI = Num_Svuot, DATA_IMPORTAZIONE = varDATA_IMPORTAZIONE, UTENTE_IMPORTAZIONE = varUTENTE_IMPORTAZIONE,
				 NOME_FILE_IMPORTAZIONE = varNOME_FILE_IMPORTAZIONE 
				 --, ANOMALIA_CARICAMENTO = varANOMALIA_CARICAMENTO, DATA_CARICAMENTO = varDATA_CARICAMENTO,
				 --UTENTE_CARICAMENTO = varUTENTE_CARICAMENTO, BELNR_WU = varBELNR_WU, DTWU = varDTWU, 
				 --HHWU = varHHWU, ANOMALIA_WU = varANOMALIA_WU
				WHERE t.MANDT = varMANDT
	          	 and t.TIPO_RECORD = varTIPO_RECORD
	          	 and t.CITY_CODE = varCITY_CODE
	          	 and t.PARTNER = varPARTNER
	          	 and t.VERTRAG = varVERTRAG 
	          	 and t.ANLAGE = varANLAGE
	          	 and t.CONTENITORE = varCONTENITORE
	          	 and t.DATA_INIZIO_IRF = varDATA_INIZIO_IRF
	          	 and t.DATA_FINE_IRF = varDATA_FINE_IRF;
				
				 --aggiorno il contatore degli UPDATE:
	        SET Environment.Variables.Upd = Environment.Variables.Upd + 1;
	        END IF;
        
        	
		
		MOVE msgForSAP NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;
		 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


